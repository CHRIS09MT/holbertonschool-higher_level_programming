The ``1-my_list`` module
=============================

Using ``print_sorted``
---------------------

This module provides the function `print_sorted` which performs integer addition with type checking.

To use the `print_sorted` function, you can dynamically import it from the `1-my_list` module as follows:

``print_sorted`` from the ``1-my_list`` module using dynamic import:

	Test 00:  Basic addition
    >>> MyList = __import__('1-my_list').MyList

Now use it:


Test 01: Basic addition

>>> my_list = MyList([3, 1, 4, 1, 5, 9])
>>> my_list.print_sorted()
[1, 1, 3, 4, 5, 9]
>>> print(my_list)
[3, 1, 4, 1, 5, 9]


Test 02: Check if MyList inherits from list

>>> isinstance(my_list, list)
True


Test 03: __str__ method (inherited from list)

>>> print(my_list)
[3, 1, 4, 1, 5, 9]


Test 04: check the list

>>> my_list.append(7)
>>> print(my_list)
[3, 1, 4, 1, 5, 9, 7]


Test 05: with sorted list after append

>>> my_list.append(10)
>>> my_list.print_sorted()
[1, 1, 3, 4, 5, 7, 9, 10]


Test 06: with unsorted list after append

>>> my_list.append(0)
>>> my_list.print_sorted()
[0, 1, 1, 3, 4, 5, 7, 9, 10]


Test 07: with unsorted list including negative numbers
>>> my_list.append(-5)
>>> my_list.print_sorted()
[-5, 0, 1, 1, 3, 4, 5, 7, 9, 10]


Test 08: returns a new sorted list without modifying the original
>>> original_list = MyList([9, 3, 7])
>>> original_list.print_sorted()
[3, 7, 9]
>>> print(original_list)
[9, 3, 7]