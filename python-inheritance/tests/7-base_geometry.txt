The ``7-base_geometry`` module
=============================

Using ``integer_validator``
---------------------

This module provides the function `integer_validator` which performs validation to check if a value is an integer and greater than 0.

To use the `integer_validator` function, you can dynamically import it from the `7-base_geometry` module as follows:

``integer_validator`` from the ``7-base_geometry`` module using dynamic import:

	Test 00:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:


	Test 01:

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 1)


	Test 02:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0


	Test 03:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", -4)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0
	

	Test 04:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", "4")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


	Test 05:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


	Test 06:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


	Test 07:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


	Test 08:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer


	Test 09:
    
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer